# -*- coding: utf-8 -*-
"""task_a.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uIugwoAbcycatHntdV0CVNDN99_ioBeE

# MIDI â†’ Key Contact Heatmap
"""

import numpy as np
import pretty_midi
import matplotlib.pyplot as plt

"""Takes in MIDI file, returns a matrix (pianoroll) with T rows and 88 columns"""

def midi_to_pianoroll(midi_path, fps=30):
    pm = pretty_midi.PrettyMIDI(midi_path)
    T = int(pm.get_end_time() * fps)
    pianoroll = np.zeros((T, 88), dtype=np.float32)

    for note in pm.instruments[0].notes:  # assume piano track
        start = int(note.start * fps)
        end = int(note.end * fps)
        key = note.pitch - 21 # MIDI 21 = A0 -> index 0
        if 0 <= key < 88:
            pianoroll[start:end, key] = note.velocity / 127.0 # normalize

    return pianoroll  # shape [T, 88]

"""Takes in matrix, converts it to Gaussian heatmaps (with blobs around pressed keys)

"""

def piano_roll_to_heatmap(piano_roll, sigma_t=1.0, sigma_k=1.0):
    num_frames, num_keys = piano_roll.shape
    heatmap = np.zeros_like(piano_roll, dtype=np.float32)

    # Precompute coordinate grid once
    t_coords = np.arange(num_frames)
    k_coords = np.arange(num_keys)
    TT, KK = np.meshgrid(t_coords, k_coords, indexing="ij")

    for t in range(num_frames):
        for k in range(num_keys):
            if piano_roll[t, k] > 0:  # note active
                gaussian = np.exp(-((TT - t)**2 / (2*sigma_t**2) +
                                    (KK - k)**2 / (2*sigma_k**2)))
                gaussian *= piano_roll[t, k]
                heatmap = np.maximum(heatmap, gaussian)

    # Visualization
    plt.figure(figsize=(12, 6))

    plt.subplot(1, 2, 1)
    plt.imshow(piano_roll.T, aspect='auto', origin='lower', cmap='gray_r')
    plt.title("Original Piano Roll")
    plt.xlabel("Time (frames)")
    plt.ylabel("Pitch (88 keys)")

    plt.subplot(1, 2, 2)
    plt.imshow(heatmap.T, aspect='auto', origin='lower', cmap='hot')
    plt.title("Gaussian Heatmap")
    plt.xlabel("Time (frames)")
    plt.ylabel("Pitch (88 keys)")

    plt.tight_layout()
    plt.show()

    return heatmap

# Run the full pipeline
pianoroll = midi_to_pianoroll('/content/Twinkle-Little-Star-Nr-1.mid', 30)
heatmap = piano_roll_to_heatmap(pianoroll)
